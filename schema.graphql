input ClientOptions {
  # Name of Customer
  _name: String

  # Email of Customer
  email: String

  # Phone number of Customer
  phone: String

  # Address of customer
  address: String

  # City of delivery
  city: String

  # Picture Sample of Work Order
  picture_file: String

  # Description of Work Order
  work_order: String
}

# This is the Client Information Object
type ClientOutput {
  # Name of Customer
  _name: String

  # Email of Customer
  email: String

  # Phone number of Customer
  phone: String

  # Address of customer
  address: String

  # City of delivery
  city: String

  # Picture Sample of Work Order
  picture_file: String

  # Description of Work Order
  work_order: String
}

input CreateItemsInput {
  # Input fields for new Items
  items: [ItemInput]
  clientMutationId: String
}

type CreateItemsPayload {
  # Input fields for new Items
  items: [ItemOutput]
  clientMutationId: String
}

# This is a graphql table for Welfurnish customers
input InvoiceInput {
  # Invoice Number
  invoice_number: Int!

  # Cost of Items Purchased
  cost: Int!

  # Purchased Items
  items: String!
}

input InvoiceOptions {
  # Invoice Number
  invoice_number: Int

  # Cost of Items Purchased
  cost: Int

  # Purchased Items
  items: String

  # User ID
  user: String
}

# This is a graphql table for Welfurnish customers
type InvoiceOutput {
  # Invoice Number
  invoice_number: Int

  # Cost of Items Purchased
  cost: Int

  # Purchased Items
  items: String
  user: User
}

# This is an input type for Items
input ItemInput {
  # RealID Field
  realID: String

  # KeyID Field
  keyID: Int

  # Name of Item
  title: String!

  # Category of Item
  category: String!

  # Price of Item
  price: Int!

  # Information on Item
  description: String!

  # Path to image
  src_file: String!

  # Path to image
  sub: String!

  # State of Purchase
  purchased: Boolean!
}

input ItemOptions {
  # RealID Field
  realID: String

  # KeyID Field
  keyID: Int

  # Name of Item
  title: String

  # Category of Item
  category: String

  # Price of Item
  price: Int

  # Information on Item
  description: String

  # Path to image
  src_file: String

  # Path to image
  sub: String

  # State of Purchase
  purchased: Boolean
}

# This is a graphql table for Welfurnish works
type ItemOutput {
  # RealID Field
  realID: String

  # KeyID Field
  keyID: Int

  # Name of Item
  title: String

  # Category of Item
  category: String

  # Price of Item
  price: Int

  # Information on Item
  description: String

  # Path to image
  src_file: String

  # Path to image
  sub: String

  # State of Purchase
  purchased: Boolean
}

input MakeCustomOrderInput {
  # Name of Customer
  _name: String!

  # Email of Customer
  email: String!

  # Phone number of Customer
  phone: String!

  # City of delivery
  city: String!

  # Picture Sample of Work Order
  picture_file: String

  # Description of Work Order
  work_order: String!
  clientMutationId: String
}

type MakeCustomOrderPayload {
  # Result from order
  customer: ClientOutput
  clientMutationId: String
}

input MakeRegularOrderInput {
  # Input fields for customer order
  customer: UserInput

  # Input fields for Invoice
  invoice: InvoiceInput
  clientMutationId: String
}

type MakeRegularOrderPayload {
  # Result from order
  customer: ClientOutput

  # New Invoice
  invoice: InvoiceOutput
  clientMutationId: String
}

# Root Mutation
type Mutation {
  # Customer can make custom orders
  customOrder(input: MakeCustomOrderInput!): MakeCustomOrderPayload

  # Customer can make regular orders
  regularOrder(input: MakeRegularOrderInput!): MakeRegularOrderPayload

  # New Items can be added
  createItems(input: CreateItemsInput!): CreateItemsPayload

  # Item properties can be updated
  updateItems(input: UpdateItemsInput!): UpdateItemsPayload
}

# This is the root query
type Query {
  items(options: ItemOptions, limits: Int, sort: String): [ItemOutput]
  users(options: UserOptions, limits: Int, sort: String): [User]
  clients(options: ClientOptions, limits: Int, sort: String): [ClientOutput]
  invoices(options: InvoiceOptions, limits: Int, sort: String): [InvoiceOutput]
}

# This is a graphql table for Welfurnish works
input UpdateItemInput {
  # RealID Field
  realID: String

  # KeyID Field
  keyID: Int!

  # Name of Item
  title: String

  # Category of Item
  category: String

  # Price of Item
  price: Int

  # Information on Item
  description: String

  # Path to image
  src_file: String

  # Path to image
  sub: String

  # State of Purchase
  purchased: Boolean
}

input UpdateItemsInput {
  # Item update field
  items: UpdateItemInput
  clientMutationId: String
}

type UpdateItemsPayload {
  # Input fields for new Items
  items: ItemOutput
  clientMutationId: String
}

# This is a graphql table for Welfurnish customers
type User {
  # KeyID Field
  keyID: String

  # Name of Customer
  _name: String

  # Email of Customer
  email: String

  # Phone number of Customer
  phone: String

  # Address of customer
  address: String

  # City of delivery
  city: String

  # Picture Sample of Work Order
  picture_file: String

  # Description of Work Order
  work_order: String
  invoices: [InvoiceOutput]
}

# This is the Client Information Object
input UserInput {
  # Name of Customer
  _name: String!

  # Email of Customer
  email: String!

  # Phone number of Customer
  phone: String!

  # Address of customer
  address: String!

  # City of delivery
  city: String!
}

input UserOptions {
  # Name of Customer
  _name: String

  # Email of Customer
  email: String

  # Phone number of Customer
  phone: String

  # Address of customer
  address: String

  # City of delivery
  city: String

  # Picture Sample of Work Order
  picture_file: String

  # Description of Work Order
  work_order: String
}
